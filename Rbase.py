import streamlit as st
from datetime import datetime
from utils import login, sidebar_logged_in, init_supabase, SessionState
# from streamlit_extras.stodo import to_do
# from streamlit_extras.stoggle import stoggle
st.set_page_config(page_title="Amazon receipt", layout="wide")

def clean_new_sn():
    current_date = datetime.now().strftime('%Y-%m-%d')

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
    response = supabase.table('new_sn').delete().lt('expiredate', current_date).execute()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    if response.data:
        # `response.data` –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        deleted_count = len(response.data)
        st.success(f"–°—Ç—Ä–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {deleted_count}.")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
        if response.error:
            st.error(f"–û—à–∏–±–∫–∞: {response.error}")
        else:
            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.")

def delete_matching_sn_records():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã used_sn
    used_sn_data = supabase.table('used_sn').select('sn').execute()
    used_sn_list = [row['sn'] for row in used_sn_data.data]

    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    deleted_count = 0

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è sn –∏–∑ —Ç–∞–±–ª–∏—Ü—ã used_sn
    for sn in used_sn_list:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∞–∫–∏–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º sn –≤ —Ç–∞–±–ª–∏—Ü–µ new_sn
        new_sn_data = supabase.table('new_sn').select('sn').eq('sn', sn).execute()
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –µ–µ
        if new_sn_data.data:
            supabase.table('new_sn').delete().eq('sn', sn).execute()
            deleted_count += 1

    # –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    st.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {deleted_count}")

# def example1():
#     to_do(
#         [(st.write, "‚òï Take my coffee")],
#         "coffee",
#     )
#     to_do(
#         [(st.write, "ü•û Have a nice breakfast")],
#         "pancakes",
#     )
#     to_do(
#         [(st.write, ":train: Go to work!")],
#         "work",
#     )

# def example2():
#     stoggle(
#         "Click me!",
#         """ü•∑ Surprise! Here's some additional content""",
#     )

# Create session state object
if 'session_state' not in st.session_state:
    st.session_state.session_state = SessionState()

if not st.session_state.session_state.logged_in:
    login()
else:
    supabase = init_supabase()
    sidebar_logged_in()
# PAGE CONTENT GOES HERE #################################################################
    st.header(f'Hi :red[ {st.session_state.session_state.user}]!', divider='red')
    
    left, middle, right = st.columns([1,5,1], vertical_alignment="bottom")

    left.button("my addresses", use_container_width=True)
    left.button("my tasks", use_container_width=True)

    # value = 
    # right.header(f'Labels: {value} / 10')
    right.progress(30)
  
  
# if st.button("CLAEN NEW SN LIST"):
#     clean_new_sn()
# if st.button("CLAEN NEW SN LIST 2"):
#     delete_matching_sn_records()

# if st.button("BUTTON1"):
# example1()
# example2()
